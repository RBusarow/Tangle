"use strict";(self.webpackChunktangle=self.webpackChunktangle||[]).push([[9410],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return v}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(n),v=a,m=p["".concat(s,".").concat(v)]||p[v]||u[v]||o;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5981:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return v},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return u}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),i=(n(8209),["components"]),l={title:"ViewModels",sidebar_label:"ViewModels"},s=void 0,d={unversionedId:"viewModels/viewModels",id:"version-0.10.0/viewModels/viewModels",title:"ViewModels",description:"SavedStateHandle injection",source:"@site/versioned_docs/version-0.10.0/viewModels/viewModels.md",sourceDirName:"viewModels",slug:"/viewModels/",permalink:"/Tangle/docs/0.10.0/viewModels/",draft:!1,editUrl:"https://github.com/rbusarow/Tangle/blob/main/website/versioned_docs/version-0.10.0/viewModels/viewModels.md",tags:[],version:"0.10.0",frontMatter:{title:"ViewModels",sidebar_label:"ViewModels"},sidebar:"version-0.10.0/Docs",previous:{title:"Configuration",permalink:"/Tangle/docs/0.10.0/configuration"}},c={},u=[{value:"SavedStateHandle injection",id:"savedstatehandle-injection",level:3},{value:"Compose support",id:"compose-support",level:2}],p={toc:u};function v(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"savedstatehandle-injection"},"SavedStateHandle injection"),(0,o.kt)("p",null,"Tangle supports injecting ",(0,o.kt)("a",{parentName:"p",href:"https://developer.android.com/topic/libraries/architecture/viewmodel-savedstate"},"SavedStateHandle")," into ViewModel constructors, where\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"SavedStateHandle")," is provided by the ViewModel's owning ",(0,o.kt)("inlineCode",{parentName:"p"},"Fragment"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"Activity"),"\n/",(0,o.kt)("inlineCode",{parentName:"p"},"NavBackStackEntry"),"."),(0,o.kt)("p",null,"In addition to or in lieu of ",(0,o.kt)("inlineCode",{parentName:"p"},"SavedStateHandle"),", Tangle can automatically extract arguments from\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"SavedStateHandle")," and inject them into the constructor, through use of\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"FromSavedStateHandle")," annotation."),(0,o.kt)("p",null,"If the constructor argument's type is not nullable, then Tangle will assert that the argument is in\nthe bundle while creating the ViewModel."),(0,o.kt)("p",null,"If the argument is marked as nullable, then Tangle will gracefully handle a missing argument and\njust inject ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,o.kt)("p",null,"Given this code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'class MyViewModel @VMInject constructor(\n  @FromSavedState("userId")\n  val userId: String,\n  @FromSavedState("address")\n  val addressOrNull: String?\n) : ViewModel()\n')),(0,o.kt)("p",null,"Tangle will generate this Provider:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'public class MyViewModel_Provider @Inject constructor(\n  private val savedStateHandle: Provider<SavedStateHandle>\n) : Provider<MyViewModel> {\n  public override fun `get`(): MyViewModel {\n    val userId = savedStateHandle.get().get<String>("userId")\n    checkNotNull(userId) {\n      "Required parameter with name `userId` " +\n      "and type `kotlin.String` is missing from SavedStateHandle."\n    }\n    val addressOrNull = savedStateHandle.get().get<String?>("address")\n    return MyViewModel(userId, addressOrNull, savedStateHandle.get())\n  }\n}\n')),(0,o.kt)("h2",{id:"compose-support"},"Compose support"),(0,o.kt)("p",null,"Tangle supports ViewModel \"injection\" in composables in a manner very similar to Hilt's\nnavigation/viewModel artifact. It will scope the ViewModel to the composable's ",(0,o.kt)("inlineCode",{parentName:"p"},"NavBackStackEntry"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Composable\nfun MyComposable(\n  navController: NavController,\n  viewModel: MyViewModel = tangle()\n) {\n  // ...\n}\n")))}v.isMDXComponent=!0},8209:function(e,t,n){n(7294)}}]);