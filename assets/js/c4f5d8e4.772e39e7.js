"use strict";(self.webpackChunktangle=self.webpackChunktangle||[]).push([[4195],{5239:function(e,t,n){n.r(t),n.d(t,{default:function(){return p}});var a=n(3117),r=n(7294),l=n(6010),o=n(4704),c=n(814),s=n(9960),i=n(2263),m=n(4996),d={heroBanner:"heroBanner_UJJx",buttons:"buttons_pzbO",container:"container_czXe",row:"row_BFIh",badges:"badges_T7Sn",features:"features_keug",featureImage:"featureImage_yA8i",heroSlogan:"heroSlogan_kIIh",gettingStartedButton:"gettingStartedButton_mhEX"},g=[{title:"Fragments",code:'@ContributesFragment(AppScope::class)\nclass MyFragment @FragmentInject constructor(\n  val repository: MyRepository\n) : Fragment() {\n\n  val name: String by arg("name")\n\n  @FragmentInjectFactory\n  interface Factory {\n    fun create(\n      @TangleParam("name") name: String\n    ): MyFragment\n  }\n}',description:r.createElement(r.Fragment,null,"Use constructor injection in ",r.createElement("code",null,"Fragment"),"s, with optional AssistedInject-like factories for type-safe ",r.createElement("code",null,"Bundle")," arguments.  Bindings are created automatically."),dest:"docs/fragments/fragments"},{title:"ViewModels",code:'class MyViewModel @VMInject constructor(\n  val repository: MyRepository,\n  @TangleParam("userId")\n  val userId: String\n) : ViewModel()\n\n@Composable\nfun MyComposable(\n  navController: NavController,\n  viewModel: MyViewModel = tangleViewModel()\n) { /* ... */ }\n\nclass MyFragment : Fragment() {\n   val viewModel: MyViewModel by tangleViewModel()\n }',description:r.createElement(r.Fragment,null,"Inject ",r.createElement("code",null,"ViewModel"),"s, including scoped ",r.createElement("code",null,"SavedStateHandle")," arguments. Use the ",r.createElement("code",null,"TangleParam")," annotation to automatically extract navigation/",r.createElement("code",null,"Bundle")," arguments and inject them explicitly."),dest:"docs/viewModels/viewModels"},{title:"Member Injection",code:'@TangleScope(UserScope::class)\nclass UserActivity : Activity() {\n\n  @Inject lateinit var logger: MyLogger\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    // inject MyLogger\n    TangleGraph.inject(this)\n\n    super.onCreate(savedInstanceState)\n\n    logger.log("started UserActivity")\n  }\n}',description:r.createElement(r.Fragment,null,'Inject scoped dependencies into "entry point" Android components using',r.createElement("code",null,"@TangleScope")," and any desired scope."),dest:"docs/member-injection"},{title:"WorkManager",code:"@TangleWorker\nclass MyWorker @AssistedInject constructor(\n  @Assisted context: Context,\n  @Assisted params: WorkerParameters\n) : CoroutineWorker(context,params) {\n  override suspend fun doWork(): Result {\n    /* ... */\n  }\n}",description:r.createElement(r.Fragment,null,"Use Dagger's ",r.createElement("code",null,"@AssistedInject")," and ",r.createElement("code",null,"@Assisted")," annotations and",r.createElement("code",null,"@TangleWorker")," to inject any ",r.createElement("code",null,"ListenableWorker"),"."),dest:"docs/workManager/workManager"}];function u(e){var t=e.imageUrl,n=e.title,a=e.description,o=e.code,s=e.dest,i=(0,m.Z)(t);return r.createElement("div",{className:(0,l.Z)("col col--4",d.feature)},i&&r.createElement("div",{className:"text--center"},r.createElement("img",{className:d.featureImage,src:i,alt:n})),r.createElement("h1",{align:"center"},n),r.createElement("div",null,r.createElement(c.Z,{className:"language-kotlin"},o)),r.createElement("p",null,a),r.createElement("a",{href:s},"Read more"))}var p=function(){var e=(0,i.Z)().siteConfig,t=void 0===e?{}:e;return r.createElement(o.Z,{title:""+t.title,description:"Android dependency injection using Anvil and Dagger"},r.createElement("header",{className:(0,l.Z)("hero hero--primary",d.heroBanner)},r.createElement("div",{className:"container"},r.createElement("p",{className:(0,l.Z)(d.heroSlogan)},r.createElement("strong",null,"Tangle")," binds Android components for Dagger with Anvil."),r.createElement("div",{className:d.buttons},r.createElement(s.Z,{className:(0,l.Z)("button button--outline button--secondary button--lg",d.gettingStartedButton),to:(0,m.Z)("docs/configuration")},"Get Started"),"\xa0\xa0\xa0\xa0\xa0\xa0"))),r.createElement("main",null,r.createElement("div",{className:d.badges},r.createElement("div",{className:"container"},r.createElement("a",{href:"https://search.maven.org/search?q=g:com.rickbusarow.tangle"},r.createElement("img",{src:"https://img.shields.io/maven-central/v/com.rickbusarow.tangle/tangle-api.svg?label=maven&style=for-the-badge&color=aa0055",alt:"version badge"})),"\xa0",r.createElement("a",{href:"https://plugins.gradle.org/plugin/com.rickbusarow.tangle"},r.createElement("img",{src:"https://img.shields.io/gradle-plugin-portal/v/com.rickbusarow.tangle?style=for-the-badge",alt:"Gradle Plugin Portal"})),"\xa0",r.createElement("a",{href:"https://github.com/rbusarow/tangle/blob/main/LICENSE"},r.createElement("img",{src:"https://img.shields.io/badge/license-apache2.0-blue?style=for-the-badge",alt:"license"}))))),r.createElement("main",null,r.createElement("section",{className:d.features},r.createElement("div",{className:"container"},r.createElement("div",{className:"row"},g.map((function(e,t){return r.createElement(u,(0,a.Z)({key:t},e))})))))))}}}]);