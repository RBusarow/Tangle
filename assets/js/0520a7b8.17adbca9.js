"use strict";(self.webpackChunktangle=self.webpackChunktangle||[]).push([[4386],{1367:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"0.13.0","label":"0.13.0","banner":"unmaintained","badge":true,"noIndex":false,"className":"docs-version-0.13.0","isLast":false,"docsSidebars":{"version-0.13.0/Docs":[{"type":"link","label":"Configuration","href":"/Tangle/docs/0.13.0/configuration","docId":"configuration"},{"type":"link","label":"Extending Anvil","href":"/Tangle/docs/0.13.0/extending-anvil","docId":"extending-anvil"},{"type":"link","label":"Member Injection","href":"/Tangle/docs/0.13.0/member-injection","docId":"member-injection"},{"type":"category","label":"ViewModels","collapsed":false,"items":[{"type":"link","label":"ViewModels","href":"/Tangle/docs/0.13.0/viewModels/","docId":"viewModels/viewModels"},{"type":"link","label":"SavedStateHandle Injection","href":"/Tangle/docs/0.13.0/viewModels/savedStateHandle","docId":"viewModels/savedStateHandle"},{"type":"link","label":"Compose","href":"/Tangle/docs/0.13.0/viewModels/compose","docId":"viewModels/compose"}],"collapsible":true},{"type":"category","label":"Fragments","collapsed":false,"items":[{"type":"link","label":"Fragments","href":"/Tangle/docs/0.13.0/fragments/","docId":"fragments/fragments"},{"type":"link","label":"Bundle Injection","href":"/Tangle/docs/0.13.0/fragments/bundles","docId":"fragments/bundles"}],"collapsible":true},{"type":"category","label":"WorkManager","collapsed":false,"items":[{"type":"link","label":"Worker","href":"/Tangle/docs/0.13.0/workManager/","docId":"workManager/workManager"}],"collapsible":true}]},"docs":{"configuration":{"id":"configuration","title":"Configuration","description":"Gradle","sidebar":"version-0.13.0/Docs"},"extending-anvil":{"id":"extending-anvil","title":"Extending Anvil","description":"[Anvil] is a Kotlin compiler plugin which simplifies how we use [Dagger]. Anvil\'s documentation is","sidebar":"version-0.13.0/Docs"},"fragments/bundles":{"id":"fragments/bundles","title":"Bundle Injection","description":"The goal","sidebar":"version-0.13.0/Docs"},"fragments/fragments":{"id":"fragments/fragments","title":"Fragments","description":"Tangle performs Fragment injection using constructor injection, just like the rest of a","sidebar":"version-0.13.0/Docs"},"member-injection":{"id":"member-injection","title":"Member Injection","description":"The Android framework has a number of classes which are initialized automatically for us:","sidebar":"version-0.13.0/Docs"},"viewModels/compose":{"id":"viewModels/compose","title":"Compose","description":"Tangle supports ViewModel \\"injection\\" in composables in a manner very similar to Hilt\'s","sidebar":"version-0.13.0/Docs"},"viewModels/savedStateHandle":{"id":"viewModels/savedStateHandle","title":"SavedStateHandle injection","description":"When using the tangleViewModel delegate function, a scoped subcomponent is created","sidebar":"version-0.13.0/Docs"},"viewModels/viewModels":{"id":"viewModels/viewModels","title":"ViewModels","description":"Once you\'ve added Tangle as a dependency, implementing [ViewModel] injection is easy.","sidebar":"version-0.13.0/Docs"},"workManager/workManager":{"id":"workManager/workManager","title":"Worker Injection","description":"Tangle is able to leverage Dagger\'s [AssistedInject] functionality to perform constructor injection","sidebar":"version-0.13.0/Docs"}}}')}}]);