"use strict";(self.webpackChunktangle=self.webpackChunktangle||[]).push([[6922],{3905:function(e,n,r){r.d(n,{Zo:function(){return s},kt:function(){return g}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),p=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},s=function(e){var n=p(e.components);return t.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(r),g=o,m=d["".concat(c,".").concat(g)]||d[g]||u[g]||a;return r?t.createElement(m,i(i({ref:n},s),{},{components:r})):t.createElement(m,i({ref:n},s))}));function g(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=r[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1801:function(e,n,r){r.r(n),r.d(n,{assets:function(){return s},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var t=r(3117),o=r(102),a=(r(7294),r(3905)),i=(r(8209),["components"]),l={title:"Worker Injection",sidebar_label:"Worker"},c=void 0,p={unversionedId:"workManager/workManager",id:"workManager/workManager",title:"Worker Injection",description:"Tangle is able to leverage Dagger's [AssistedInject] functionality to perform constructor injection",source:"@site/docs/workManager/workManager.md",sourceDirName:"workManager",slug:"/workManager/",permalink:"/Tangle/docs/next/workManager/",draft:!1,editUrl:"https://github.com/rbusarow/Tangle/blob/main/website/docs/workManager/workManager.md",tags:[],version:"current",frontMatter:{title:"Worker Injection",sidebar_label:"Worker"},sidebar:"Docs",previous:{title:"Bundle Injection",permalink:"/Tangle/docs/next/fragments/bundles"}},s={},u=[],d={toc:u};function g(e){var n=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Tangle is able to leverage Dagger's ",(0,a.kt)("a",{parentName:"p",href:"https://dagger.dev/dev-guide/assisted-injection"},"AssistedInject")," functionality to perform constructor injection\non your ",(0,a.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/work/ListenableWorker"},"Workers"),".  The ",(0,a.kt)("inlineCode",{parentName:"p"},"@TangleWorker")," annotation will automatically multi-bind any Worker,\nallowing you to create it via the ",(0,a.kt)("inlineCode",{parentName:"p"},"TangleWorkerFactory"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"import android.content.Context\nimport androidx.work.CoroutineWorker\nimport androidx.work.WorkerParameters\nimport dagger.assisted.Assisted\nimport dagger.assisted.AssistedInject\nimport tangle.work.TangleWorker\n\n@TangleWorker\nclass MyWorker @AssistedInject constructor(\n  @Assisted context: Context,\n  @Assisted params: WorkerParameters,\n  val repository: MyRepository\n) : CoroutineWorker(context,params){\n  override suspend fun doWork(): Result {\n    // ...\n  }\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"TangleGraph")," must be initialized as early as possible -- typically in ",(0,a.kt)("inlineCode",{parentName:"p"},"Application.onCreate()"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"TangleWorkerFactory")," will then be automatically added to the application-scoped component.\nUse an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"TangleWorkerFactory")," in your ",(0,a.kt)("inlineCode",{parentName:"p"},"WorkManager")," configuration."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"import android.app.Application\nimport androidx.work.Configuration\nimport tangle.inject.TangleGraph\nimport tangle.work.TangleWorkerFactory\nimport javax.inject.Inject\n\nclass MyApplication : Application(), Configuration.Provider {\n\n  @Inject lateinit var workerFactory: TangleWorkerFactory\n\n  override fun onCreate() {\n    super.onCreate()\n\n    val myAppComponent = DaggerAppComponent.factory()\n      .create(this)\n\n    TangleGraph.add(myAppComponent)\n\n    // inject your application class after initializing TangleGraph\n    (myAppComponent as MyApplicationComponent).inject(this)\n  }\n\n  override fun getWorkManagerConfiguration(): Configuration {\n    return Configuration.Builder()\n      .setWorkerFactory(workerFactory)\n      .build()\n  }\n}\n")))}g.isMDXComponent=!0},8209:function(e,n,r){r(7294)}}]);